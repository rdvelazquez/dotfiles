{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "functions.logger.info": {
    "scope": "javascript",
    "prefix": "funl",
    "body": ["functions.logger.info('$1: ', $1);"]
  },
  "fireBaseFunction": {
    "scope": "javascript",
    "prefix": "fbfunc",
    "body":["exports.$1 = functions.https.onRequest((req, res) => {\n\tcors(req, res, async () => {\n\t\ttry {\n\t\t\tres.status(200).send('placeholder');\n\t\t} catch (error) {\n\t\t\tfunctions.logger.error(error);\n\t\t\tres.status(500).send(error);\n\t\t}\n\t});\n});"]
  },
  "promise": {
    "scope": "javascript", 
    "prefix": "promisel",
    "body":["return new Promise((resolve, reject) => {\n\ttry {\n\t\tresolve('placeholder');\n\t} catch(error) {\n\t\treject(error);\n\t}\n});"]
  },
  "ts_promise": {
    "scope": "typescript", 
    "prefix": "promisel",
    "body":["return new Promise((resolve, reject) => {\n\ttry {\n\t\tresolve('placeholder');\n\t} catch(error) {\n\t\treject(error);\n\t}\n});"]
  },
  "tsx_promise": {
    "scope": "typescriptreact", 
    "prefix": "promisel",
    "body":["return new Promise((resolve, reject) => {\n\ttry {\n\t\tresolve('placeholder');\n\t} catch(error) {\n\t\treject(error);\n\t}\n});"]
  }
}
